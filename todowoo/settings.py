"""
Django settings for todowoo project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import dj_database_url # We'll use this for potential future database flexibility

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use an environment variable for SECRET_KEY in production!
# For local development, you can keep the hardcoded key or use a .env file.
# On PythonAnywhere, you'll set this in the "Web" tab under "Environment variables".
SECRET_KEY = os.environ.get('SECRET_KEY', '_jjhm#&qjqbm_qula%xs2(0&^qwai@2c%au&4z57%g+=-lsbno')

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to False in production. Use environment variable for flexibility.
DEBUG = os.environ.get('DEBUG', 'True') == 'True'


# ALLOWED_HOSTS: List of host/domain names that this Django site can serve.
# In production, this should include your PythonAnywhere domain.
# For example: ['your-username.pythonanywhere.com']
# You can also load this from an environment variable for flexibility.
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')
# Example for PythonAnywhere: ALLOWED_HOSTS = ['your-username.pythonanywhere.com']
# When you set ALLOWED_HOSTS on PythonAnywhere, use:
# ALLOWED_HOSTS = ['your-username.pythonanywhere.com', 'www.your-username.pythonanywhere.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'todo', # Your application
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todowoo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Project-level templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todowoo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Use dj_database_url to parse DATABASE_URL environment variable for production databases
# This makes it easy to switch between SQLite locally and PostgreSQL/MySQL in production
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Override default database with environment variable for production if DATABASE_URL is set
# This line is for future compatibility with other hosts like Render/Heroku if you ever switch
# It's not strictly necessary for PythonAnywhere's free tier using SQLite.
# For PythonAnywhere, you would generally stick with the SQLite setup above.
# database_url = os.environ.get('DATABASE_URL')
# if database_url:
#     DATABASES['default'] = dj_database_url.parse(database_url, conn_max_age=600)


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' # Your specified timezone

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
# This is where Django will collect all static files (CSS, JS, images) when you run `python manage.py collectstatic`
# This directory should be served by your web server (PythonAnywhere handles this for you if configured).
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (user-uploaded content)
# If your project allows users to upload images (e.g., for health cards), you need these:
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles') # Create a folder named 'mediafiles' in your project root

LOGIN_URL = '/login' # This looks correct based on your previous URL patterns

# Email Backend Configuration
# For production, you'll need a real email backend like an SMTP server.
# For PythonAnywhere, you might use a service like SendGrid, Mailgun, or even a Gmail SMTP (with app password).
# This is crucial for features like password reset emails.
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Prints emails to console in development
else:
    # Example for an SMTP backend (replace with your actual provider's settings)
    # You would typically get these from environment variables for security.
    # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    # EMAIL_HOST = os.environ.get('EMAIL_HOST')
    # EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    # EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
    # EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    # EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    # DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'webmaster@yourdomain.com')
    # SERVER_EMAIL = os.environ.get('SERVER_EMAIL', 'webmaster@yourdomain.com')
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Default to SMTP for production, but configure details
    # For a free PythonAnywhere account, you might omit email sending or configure a very basic one.
    # If you don't send emails, this part is less critical initially.

# Django Security Settings (Good to have for production)
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = True # Redirects HTTP to HTTPS
# SECURE_HSTS_SECONDS = 31536000 # HSTS for a year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')